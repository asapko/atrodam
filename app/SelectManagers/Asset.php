<?php

declare(strict_types=1);

namespace Dam\SelectManagers;

/**
 * Class Asset
 *
 * @package Dam\SelectManagers
 */
class Asset extends AbstractSelectManager
{
    /**
     * NotEntity filter
     *
     * @param array $result
     */
    protected function boolFilterNotEntity(&$result)
    {
        if ($value = $this->getBoolData('notEntity')) {
            $value = (array)$value;

            foreach ($value as $id) {
                $result['whereClause'][] = [
                    'id!=' => (string)$id,
                ];
            }
        }
    }

    /**
     * @param $result
     */
    protected function boolFilterNotSelectAssets(&$result)
    {
        if ($value = $this->getBoolData('notSelectAssets')) {
            $result['whereClause'][] = [
                "id!=s" => [
                    "selectParams" => [
                        "select"      => ['asset_category_asset.asset_id'],
                        "customJoin"  => "JOIN asset_category_asset ON asset_category_asset.asset_id = asset.id",
                        "whereClause" => [
                            'asset_category_asset.asset_category_id' => (string)$value,
                            'asset_category_asset.deleted'           => 0,
                        ],
                    ],
                ],
            ];
        }
    }

    /**
     * @param $result
     */
    protected function boolFilterOnlyActive(&$result)
    {
        parent::boolFilterOnlyActive($result); // TODO: Change the autogenerated stub
    }

    /**
     * @param $result
     */
    protected function boolFilterLinkedWithAssetCategory(&$result)
    {
        // prepare category
        $category = $this
            ->getEntityManager()
            ->getEntity('AssetCategory', (string)$this->getBoolData('linkedWithAssetCategory'));

        if (!empty($category)) {
            // get category tree products
            $products = $category->getTreeAssets();

            $result['whereClause'][] = [
                'id' => count($products > 0) ? array_column($products->toArray(), 'id') : [],
            ];
        }
    }

    protected function boolFilterNotSelected(&$result)
    {
        if ($value = $this->getBoolData('notSelected')) {
            $value = (array)$value;

            foreach ($value as $id) {
                $result['whereClause'][] = [
                    'id!=' => (string)$id,
                ];
            }
        }
    }


}
